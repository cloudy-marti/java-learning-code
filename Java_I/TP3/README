/**
 * Exercice 1 - Livre
 *
 * 		1.2
 *		À l'exécution on a : null null
 *		Car on a créé un objet Book avec le constructeur par défaut
 *		Qui ne prend rien en paramètres et donc les champs sont vides.
 *
 *		1.3
 *		La classe Main n'a pas accès aux champs privés de la classe Book
 *		Donc on a une erreur de compilation.
 *		On va utiliser des Getter().
 *
 *		1.4
 *		private < --- < protected < public
 *		Parce que les champs doivent etre modifiables qu'à travers les méthodes de la classe
 *		Ceci permet de modifier des champs et adapter le code sur la classe uniquement
 *		Et que cela n'afecte pas le comportement des autres classes utilisant celle-ci.
 *		
 *		1.5
 *		Un accesseur est une méthode qui permet d'avoir acces à un champs privé d'une classe
 *		En important (Setter()) des données ou en les exportant (Getter()).
 *		Ici on utilisera Getter() car on a pas l'intéret de changer les valeurs.
 *
 *		1.6
 *		Il faut le spécifier sur la documentation.
 *		Il n'y a pas moyen de le faire en code.
 *		
 *		1.7
 *		Il faut tout simplement rajouter les paramètres dans le constructeur appelé dans le Main.
 *
 *		1.8
 *		Je n'ai pas reçu de problème ...
 *
 *		1.10
 *		Le compilateur sait quel constructeur appeler par le nombre et le type de paramètres
 *		Donnés à la fonction appelée dans le main.
 *
 *
 * Exercice 2 - Liberté, Egalité, Fraternité
 *	
 *		2.1
 *		Le code affiche true et false
 *		true car b1 et b2 référencent le meme objet
 *		false car b1 et b3 référencent un objet différent (meme si il est pareil)
 *
 *		2.3
 *		indexOf de ArrayList retourne l'indice de la premiere occurrence de l'objet en paramètre.
 *
 *		2.4
 *		A la compilation on a des Warning ( -Xlint pour plus de détails )
 *		A l'exécution on a 0 et -1 respectivement. -1 n'a pas l'air d'un indice valable ...
 *
 *		2.5
 *		Book.equals()
 *
 *		2.7
 *		@Override dit que la fonction écrite dessous va etre une redéfinition.
 *
 *		2.9
 *		Le code compile mais affiche une erreur à l'exécution.
 *		L'erreur se situe au niveau de l'appel de equals.
 *		On check si le pointeur est null au tout début.
 *
 *		2.10
 *		La bonne pratique est de check si mon pointeur est null avant de faire quoi que ce soit.
 *		Mais surtout d'éviter d'utiliser null.
 *		On va préférer utiliser la méthode Optional.
 *
 */